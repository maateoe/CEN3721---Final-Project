import streamlit as st
import pandas as pd
import numpy as np
import requests
import matplotlib.pyplot as plt
#import sqlite3
#from sqlite3 import Error

# API Key
#Jonathan
# 9X4EL8OIZHZX1YOV
API_KEY = 'YU2B2GDNX6D26GQB'


#Mateo 
# YU2B2GDNX6D26GQB

# Function to get stock data
def get_stock_data(symbol):
    base_url = f'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={symbol}&apikey={API_KEY}'
    response = requests.get(base_url)
    data = response.json()
    return data

# Function to create a database connection
# def create_connection(db_file):
#     conn = None
#     try:
#         conn = sqlite3.connect(db_file)
#         return conn
#     except Error as e:
#         st.error(e)
#     return conn

# Function to create tables
# def create_table(conn):
#     try:
#         c = conn.cursor()
#         c.execute('''CREATE TABLE IF NOT EXISTS finance_data
#                      (id INTEGER PRIMARY KEY AUTOINCREMENT, 
#                       income REAL NOT NULL, 
#                       expenses REAL NOT NULL, 
#                       investment REAL NOT NULL,
#                       stock_symbol TEXT NOT NULL)''')
#     except Error as e:
#         st.error(e)

# Function to insert data into the table
def insert_data(conn, data):
    sql = '''INSERT INTO finance_data(income, expenses, investment, stock_symbol)
             VALUES(?, ?, ?, ?)'''
    cur = conn.cursor()
    cur.execute(sql, data)
    conn.commit()
    return cur.lastrowid

# Function to fetch all data from the table
def fetch_all_data(conn):
    cur = conn.cursor()
    cur.execute("SELECT * FROM finance_data")
    rows = cur.fetchall()
    return rows

# Database setup
# database = "finance_data.db"
# conn = create_connection(database)
# if conn is not None:
#     create_table(conn)
# else:
#     st.error("Error! Cannot create the database connection.")

# Title and Description
st.title("Personal Finance Dashboard")
st.write("Welcome to the Personal Finance Dashboard. Track your income, expenses, and investments in one place.")

# Custom CSS for Streamlit
custom_css = """
<style>
    body {
        background-color: #1e1e2e;
        color: #ffffff;
        font-family: Arial, sans-serif;
    }
    
    .stButton>button {
        background-color: #2c2c54;
        color: #ffffff;
        border: none;
        border-radius: 5px;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
    }

    .stButton>button:hover {
        background-color: #3c40c6;
    }

    .stSelectbox select {
        background-color: #2c2c54;
        color: #ffffff;
    }

    .stCheckbox>div {
        color: #ffffff;
    }

    .bouncing-text {
        animation: bounce 2s infinite;
        color: #706fd3;
        font-size: 1.5em;
        font-weight: bold;
    }

    @keyframes bounce {
        0%, 20%, 50%, 80%, 100% {
            transform: translateY(0);
        }
        40% {
            transform: translateY(-30px);
        }
        60% {
            transform: translateY(-15px);
        }
    }
</style>
"""

# Display custom CSS
st.markdown(custom_css, unsafe_allow_html=True)

# Bouncing Text
st.markdown("<h2 class='bouncing-text'>Take Control of Your Finances!</h2>", unsafe_allow_html=True)

# Sidebar for user input
st.sidebar.title("User Input")
income = st.sidebar.number_input("Enter your monthly income:", min_value=0.0, format="%.2f")
expenses = st.sidebar.number_input("Enter your monthly expenses:", min_value=0.0, format="%.2f")
investment = st.sidebar.number_input("Enter your monthly investment:", min_value=0.0, format="%.2f")
stock_symbol = st.sidebar.text_input("Enter stock symbol:", value="AAPL")

# Button to save data
# if st.sidebar.button("Save Data"):
#     with conn:
#         data = (income, expenses, investment, stock_symbol)
#         insert_data(conn, data)
#         st.sidebar.success("Data saved successfully!")

# Fetch all data
# if st.sidebar.checkbox("Show All Data"):
#     st.subheader("All Data")
#     rows = fetch_all_data(conn)
#     df_all_data = pd.DataFrame(rows, columns=["ID", "Income", "Expenses", "Investment", "Stock Symbol"])
#     st.dataframe(df_all_data)

# Fetch stock data
stock_data = get_stock_data(stock_symbol)

# ERROR
# Not getting any system errors in python but it doesn't fetch the stock data
# Process stock data
if "Time Series (Daily)" in stock_data:
    ts_data = stock_data["Time Series (Daily)"]
    dates = list(ts_data.keys())
    close_prices = [float(ts_data[date]["4. close"]) for date in dates]
    stock_df = pd.DataFrame({
        "Date": dates,
        "Close Price": close_prices
    })
    stock_df["Date"] = pd.to_datetime(stock_df["Date"])
    stock_df = stock_df.sort_values("Date")
else:
    st.error("Error fetching stock data. Please check the stock symbol and API key.")

# Data for display
data = {
    "Category": ["Income", "Expenses", "Investment"],
    "Amount": [income, expenses, investment]
}

df = pd.DataFrame(data)

# Display data table
st.subheader("Financial Summary")
st.dataframe(df)

# Line Chart
st.subheader("Income vs Expenses")
fig, ax = plt.subplots()
ax.plot(df["Category"], df["Amount"], marker='o', color='#3c40c6')
st.pyplot(fig)

# Bar Chart
st.subheader("Financial Breakdown")
st.bar_chart(df.set_index("Category"))

# Error on line 200
# Stock Prices Line Chart
st.subheader(f"{stock_symbol} Stock Prices")
if "Time Series (Daily)" in stock_data:
    # The "stock_df" part is undefined apparently when I run it
    st.line_chart(stock_df.set_index("Date")["Close Price"], use_container_width=True)
else:
    st.error("Error fetching stock data. Please check the stock symbol and API key.")

# Map
st.subheader("Investments by Location")
locations = pd.DataFrame({
    'lat': np.random.uniform(37.76, 37.77, 10),
    'lon': np.random.uniform(-122.42, -122.41, 10)
})
st.map(locations)

# Interactive Widgets
if st.button("Calculate Savings"):
    savings = income - expenses - investment
    if savings > 0:
        st.success(f"Your monthly savings are: ${savings:.2f}")
    elif savings == 0:
        st.info("You are breaking even.")
    else:
        st.warning(f"You are overspending by: ${abs(savings):.2f}")

st.checkbox("I agree to the terms and conditions")

# Additional Widgets
st.radio("Select an option:", ["Option 1", "Option 2", "Option 3"])
st.selectbox("Select a category:", ["Income", "Expenses", "Investment"])
st.multiselect("Select multiple categories:", ["Income", "Expenses", "Investment"])
st.slider("Select a range:", 0, 100, (25, 75))
st.text_input("Enter a note:")
st.text_area("Enter detailed notes:")

# Feedback Messages
st.success("This is a success message!")
st.info("This is an informational message.")
st.warning("This is a warning message.")
st.error("This is an error message.")

# Run the application
if __name__ == '__main__':
    st.set_page_config(page_title="Personal Finance Dashboard")
    st.write("Personal Finance Dashboard is running...")




